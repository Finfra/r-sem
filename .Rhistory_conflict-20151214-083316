?selectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary.lavaan
getS3method("summary","lavaan")
ch4=read.csv("data/ch4.csv")
model <- 'y1 ~ x1 + x2 + x3
y2 ~ x1 + x2 + x3'
fit <- sem(model, data = ch4)
summary(fit)
fit
str(fit)
summary(fit)
showMethods("summary")
getMethod("summary","lavaan")
shiny::runApp()
model <- 'price =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8'
data=read.csv("data.csv")
fit <- cfa(model, data =data)
data=read.csv("data/data.csv")
str(data)
model <- 'price =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8'
fit <- sem(model, data =data)
summary(fit, standardized = TRUE)
fit <- sem(model, data =data)
summary(fit, standardized = TRUE)
fit <- cfa(model, data =data)
summary(fit, standardized = TRUE)
shiny::runApp()
shiny::runApp()
data=read.csv("data.csv")
str(data)
model <- 'price =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8'
fit <- cfa(model, data =data)
summary(fit, standardized = TRUE)
fit <- cfa(model, data =data)
summary(fit)
summary(fit, standardized = TRUE)
data=read.csv("data.csv")
model <- 'price =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8'
fit <- cfa(model, data =data)
data=read.csv("data/data.csv")
str(data)
model <- 'price =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8'
fit <- cfa(model, data =data)
summary(fit)
summary(fit, standardized = TRUE)
require(lavaan)
data=read.csv("data/data.csv")
str(data)
model <- 'price =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8'
fit <- cfa(model, data =data)
fit
summary(fit)
summary(fit, standardized = TRUE)
summary(fit, standardized = TRUE)
summary(fit)
summary(fit, standardized = TRUE)
data=read.csv("data/data.csv")
model <- 'price =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8'
fit <- cfa(model, data =data)
str(fit)
summary(fit, standardized = TRUE, fit.measure=TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data=read.csv("data.csv")
data=read.csv("data/data.csv")
model <- 'price =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
Atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8
cs ~ price + service + Atm
cl ~ price + cs'
fit <- sem(model, data =data, group="sex",
group.equal = c("loadings"))
require(lavaan)
require(semPlot)
data=read.csv("data/data.csv")
model <- 'price =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
Atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8
cs ~ price + service + Atm
cl ~ price + cs'
fit <- sem(model, data =data, group="sex",
group.equal = c("loadings"))
summary(fit, fit.measures=TRUE)
diagram<-semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
fit <- sem(model, data =data, group="sex")
summary(fit, fit.measures=TRUE)
diagram<-semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
str(diagram)
length(diagram)
diagram[[1]]
diagram[[1]]
diagram
diagram[[2]]
layout(t(1:2))
diagram<-semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
diagram<-semPlot::semPaths(fit,ask=FALSE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
par(mfrow=c(1,1))
diagram<-semPlot::semPaths(fit,ask=FALSE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
diagram<-semPlot::semPaths(fit,ask=FALSE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
diagram<-semPlot::semPaths(fit,ask=FALSE,panelGroups=TRUE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
diagram<-semPlot::semPaths(fit,ask=FALSE,panelGroups=TRUE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
diagram<-semPlot::semPaths(fit,ask=FALSE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
diagram<-semPlot::semPaths(fit,ask=FALSE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
shiny::runApp()
data=read.csv("data/data.csv")
model <- 'price =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
Atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8
cs ~ price + service + Atm
cl ~ price + cs'
fit <- sem(model, data =data, group="sex",group.equal="loadings")
summary(fit, fit.measures=TRUE)
diagram<-semPlot::semPaths(fit,ask=FALSE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
fit <- sem(model, data =data, group="sex")
summary(fit, fit.measures=TRUE)
diagram<-semPlot::semPaths(fit,ask=FALSE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
diagram<-semPlot::semPaths(fit,ask=FALSE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
qgraph(diagram)
require(qgraph)
qgraph(diagram)
qgraph(diagram[[1]])
qgraph(diagram[[2]])
length(diagram)
ch9=read.csv("data/ch9.csv")
model <- 'Y ~ b*M + c*X
M ~ a*X
indirect effect:=a*b
total effect:=c+(a*b)'
fit <- sem(model, data=ch9, se="bootstrap")
summary(fit,standardized=TRUE)
diagram<-semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
fit <- sem(model, data=ch9)
summary(fit,standardized=TRUE)
diagram<-semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
fit <- sem(model, data=ch9)
summary(fit,standardized=TRUE)
diagram<-semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
ch9=read.csv("data/ch9.csv")
model <- 'Y ~ b*M + c*X
M ~ a*X
indirect effect:=a*b
total effect:=c+(a*b)'
fit <- sem(model, data=ch9)
summary(fit,standardized=TRUE)
fit <- sem(model, data=ch9, se="bootstrap")
summary(fit,standardized=TRUE)
summary(fit,standardized=TRUE)
diagram<-semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
require(ReporteRs)
addplot=function(mydoc,plotfunction,title=""){
mydoc=addSlide(mydoc,"Title and Content")
mydoc=addTitle(mydoc,title)
mydoc=addPlot(mydoc,plotfunction,vector.graphic=input$vector)
mydoc
}
diagram<-semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
require(ReporteRs)
addplot=function(mydoc,plotfunction,title=""){
mydoc=addSlide(mydoc,"Title and Content")
mydoc=addTitle(mydoc,title)
mydoc=addPlot(mydoc,plotfunction,vector.graphic=input$vector)
mydoc
}
data=read.csv("data/data.csv")
model <- 'price =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
Atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8
cs ~ a*price + b*service + c*Atm
cl ~ d*cs + f*price
indirect effect:= a*d+b*d+c*d
total effect:=f+(a*d)+(b*d)+(c*d)'
fit <- sem(model, data =data,se="bootstrap")
fit <- sem(model, data =data)
summary(fit, standardized=TRUE)
diagram<-semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
require(ReporteRs)
addplot=function(mydoc,plotfunction,title=""){
mydoc=addSlide(mydoc,"Title and Content")
mydoc=addTitle(mydoc,title)
mydoc=addPlot(mydoc,plotfunction,vector.graphic=input$vector)
mydoc
}
mydoc=pptx()
mydoc=addSlide(mydoc,"Title Slide")
mydoc=addTitle(mydoc,"Results of SEM")
mydoc=addSubtitle(mydoc,"prepared by r-sem.com")
mydoc=addplot(mydoc,semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE))
addplot=function(mydoc,plotfunction,title=""){
mydoc=addSlide(mydoc,"Title and Content")
mydoc=addTitle(mydoc,title)
mydoc=addPlot(mydoc,plotfunction,vector.graphic=TRUE)
mydoc
}
mydoc=addplot(mydoc,semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE))
addplot=function(mydoc,plotfunction,title=""){
mydoc=addSlide(mydoc,"Title and Content")
mydoc=addTitle(mydoc,title)
mydoc=addPlot(mydoc,plotfunction,vector.graphic=FALSE)
mydoc
}
mydoc=addplot(mydoc,semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE))
mydoc=addplot(mydoc,semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data=read.csv("data/data.csv")
model <- '가격 =~ x1 + x2 + x3 + x4
service =~ x5 + x6 + x7 + x8
Atm =~ x9 + x10 + x11 + x12
cs =~ y1 + y2 + y3 + y4
cl =~ y5 + y6 + y7 + y8
cs ~ 가격 + service + Atm
cl ~ 가격 + cs'
fit <- sem(model, data =data, group="sex")
summary(fit, fit.measures=TRUE)
diagram<-semPlot::semPaths(fit,ask=FALSE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
fit <- sem(model, data =data)
summary(fit, fit.measures=TRUE)
diagram<-semPlot::semPaths(fit,ask=FALSE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
fit <- sem(model, data =data)
summary(fit, fit.measures=TRUE)
diagram<-semPlot::semPaths(fit,ask=FALSE,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
shiny::runApp()
shiny::runApp()
ch10=read.csv("data/ch10.csv")
ch10
model <- 'i =~ 1*t1 + 1*t2 + 1*t3 + 1*t4
s =~ 0*t1 + 1*t2 + 2*t3 + 3*t4
i ~ gender
s ~ gender'
fit <- growth(model, data =ch10)
summary(fit)
diagram<-semPlot::semPaths(fit,
whatLabels="std", intercepts=FALSE, style="lisrel",
nCharNodes=0,
nCharEdges=0,
curveAdjacent = TRUE,title=TRUE, layout="tree2",curvePivot=TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("matrixpls")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("OpenMx")
data(demoOneFactor)  # load the demoOneFactor dataframe
manifests <- names(demoOneFactor)  # set the manifest to the 5 demo variables
latents <- c("G")  # define 1 latent variable
model <- mxModel("One Factor", type = "RAM", manifestVars = manifests, latentVars = latents,
mxPath(from = latents, to = manifests), mxPath(from = manifests, arrows = 2),
mxPath(from = latents, arrows = 2, free = FALSE, values = 1), mxData(cov(demoOneFactor),
type = "cov", numObs = 500))
model <- mxRun(model)  #run model, returning the result
semPaths(model, color = list(lat = rgb(245, 253, 118, maxColorValue = 255),
man = rgb(155, 253, 175, maxColorValue = 255)), mar = c(10, 5, 10, 5))
