{
    "collab_server" : "",
    "contents" : "library(shiny)\n#require(moonBook)\n#require(ztable)\n#require(mycor)\n#require(ggplot2)\nrequire(plyr)\nrequire(rmarkdown)\nrequire(readxl)\n#require(ggthemes)\n#require(reshape)\nrequire(rhandsontable)\n#require(shinyjs)\nrequire(ReporteRs)\nrequire(lavaan)\nrequire(semPlot)\nrequire(extrafont)\n#require(matrixpls)\n\nsource(\"cleaning.R\")\n\n#loadfonts()\n\nmyexample<-read.csv(\"example.csv\")\n\nmyequation<-myexample$myequation\nmyfile<-myexample$myfile\nmymethod<-myexample$method\n\nset.seed(1234)\nexample1 <- data.frame(y = rnorm(100), \n                   x1 = rnorm(100), \n                   x2 = rnorm(100),\n                   x3 = rnorm(100))\nset.seed(1234)\nX <- rnorm(100)\nM <- 0.5*X + rnorm(100)\nY <- 0.7*M + rnorm(100)\nexample2 <- data.frame(X , Y , M )\nADHD=read.csv(\"data/ADHD.csv\")\n\nload(\"translation.bin\") # contains the dictionary, parsed as a double list\n\n\noptions(ztable.type=\"html\")\noptions(shiny.maxRequestSize=30*1024^2)\n\ndic=read.csv(\"dictionary.csv\",fileEncoding=\"utf-8\",stringsAsFactors = FALSE)\n\nhelp_console <- function(topic, format=c(\"text\", \"html\", \"latex\", \"Rd\"),\n                         lines=NULL, before=NULL, after=NULL) {  \n  format=match.arg(format)\n  if (!is.character(topic)) topic <- deparse(substitute(topic))\n  helpfile = utils:::.getHelpFile(help(topic))\n  \n  hs <- capture.output(switch(format, \n                              text=tools:::Rd2txt(helpfile),\n                              html=tools:::Rd2HTML(helpfile),\n                              latex=tools:::Rd2latex(helpfile),\n                              Rd=tools:::prepare_Rd(helpfile)\n  )\n  )\n  if(!is.null(lines)) hs <- hs[lines]\n  hs <- c(before, hs, after)\n  cat(hs, sep=\"\\n\")\n  invisible(hs)\n}\n\nshinyServer(function(input, output,session) {\n    \n\n    shinyjs::onclick(\"toggleModelPlot\", shinyjs::toggle(id = \"modelPlot\", anim = TRUE))  \n    shinyjs::onclick(\"toggleFinalPlot\", shinyjs::toggle(id = \"finalPlot\", anim = TRUE))  \n    shinyjs::onclick(\"toggle2ndEquation\", shinyjs::toggle(id = \"2ndEquation\", anim = TRUE))  \n    shinyjs::onclick(\"toggleHelpOp\", shinyjs::toggle(id = \"helpOperator\", anim = TRUE))  \n    shinyjs::onclick(\"toggleHelpData\", shinyjs::toggle(id = \"helpData\", anim = TRUE))  \n\n    tr <- function(text){ # translates text into current language\n        sapply(text,function(s) translation[[s]][[input$language]], USE.NAMES=FALSE)\n    }\n    \n    tr2out=function(string,size=3){\n        output[[string]]=renderPrint(cath(tr(string),size))\n    }\n    \n    md2html=function(string){\n        HTML(markdownToHTML(fragment.only=TRUE,text=string))\n    }    \n    \n    \n\n    file2ext=function(filename){\n        namelist=unlist(strsplit(filename,\".\",fixed=TRUE))\n        result=namelist[length(namelist)]\n        if((result==\"csv\")|(result==\"xlsx\")) return(result)\n        else return(NULL)\n    }\n    \n    file2newname=function(file){\n        mypath=unlist(strsplit(file$datapath,\"/\"))\n        length(mypath)\n        temp=mypath[1]\n        for(i in 2:(length(mypath)-1)) temp=paste(temp,mypath[i],sep=\"/\")\n        result=paste(temp,\"/\",\"test.\",file2ext(file$name),sep=\"\")\n        result\n    }\n\n    my_theme=function(p){\n        if(input$theme!=\"gray\") {p<-eval(parse(text=paste(\"p+theme_\",input$theme,\"()\",sep=\"\")))}\n        p\n    }\n        \n    my_readfile=function(file){\n        ext=file2ext(file$name)\n        result=NULL\n        if(is.null(ext)) {\n            session$sendCustomMessage(type = 'testmessage',\n                                      message = list( 'Only file with xlsx or csv format is supported.'))\n        } else if(ext==\"csv\") {\n            try(result<-read.csv(file$datapath,header=TRUE,stringsAsFactors = FALSE),silent=TRUE)\n            if(is.null(result)) {\n                try(result<-read.csv(file$datapath,header=TRUE,fileEncoding=\"euc-kr\",stringsAsFactors = FALSE),silent=TRUE)\n                if(is.null(result)) session$sendCustomMessage(type = 'testmessage',\n                                                      message = list( 'File read error : please check file encoding')) \n            }\n        }  else {\n            newname=file2newname(file)\n            file.copy(file$datapath,newname)\n            result=read_excel(newname)\n            if(is.null(result)) session$sendCustomMessage(type = 'testmessage',\n                                                          message = list( 'File read error : please check file encoding')) \n        } \n        result\n    }\n    mypaste=function(tempA,...,sep=\",\"){\n        result=\"\"\n        if(tempA==\"\")  result=paste0(...)\n        else result=paste0(tempA,sep,...)\n        result\n    }\n    myplotPNG=function(listf,width=input$plotWidth,height=input$plotHeight,\n                       units=\"in\",res=300,start=0){\n        filename=c()\n        count=length(listf)\n        if(count>0) for(i in 1:count){\n            path <- paste(\"plot_\", i+start, \".png\", sep=\"\")\n            filename <- c(filename, path)\n            plotPNG(listf[[i]],path,width=width,height=height,\n                    units=units,res=res)\n        }\n        filename\n    }\n    \n    myplotPDF=function(listf,isggplot=NULL,width=input$plotWidth,height=input$plotHeight,\n                       units=\"in\",res=300,start=0){\n        filename=c()\n        count=length(listf)\n        if(is.null(isggplot)) isggplot=rep(FALSE,count)\n        if(count>0) for(i in 1:count){\n            path <- paste(\"plot_\", i+start, \".pdf\", sep=\"\")\n            filename <- c(filename, path)\n            plotPDF(listf[[i]],path,width=width,height=height,\n                    units=units,res=res,isggplot[i])\n        }\n        filename\n    }\n    \n    plotPDF=function(fun,file,width=7,height=5,units=\"in\",res=300,ggplot=FALSE){\n        \n        if(ggplot) ggsave(file,fun(),width=width,device=cairo_pdf,height=height,units=units,dpi=res)\n        else {\n            cairo_pdf(file,width=width,height=height)\n            #pdf(file,paper=\"letter\")\n            fun()\n            dev.off()\n        }\n        \n    }   \n    \n    myplotSVG=function(listf,isggplot=NULL,width=input$plotWidth,height=input$plotHeight,\n                      start=0){\n        filename=c()\n        count=length(listf)\n        if(is.null(isggplot)) isggplot=rep(FALSE,count)\n        if(count>0) for(i in 1:count){\n            path <- paste(\"plot_\", i+start, \".svg\", sep=\"\")\n            filename <- c(filename, path)\n            plotSVG(listf[[i]],path,width=width,height=height,\n                   isggplot[i])\n        }\n        filename\n    }\n    \n    plotSVG=function(fun,file,width=7,height=5,ggplot=FALSE){\n        \n        if(ggplot) ggsave(file,fun(),width=width,height=height)\n        else {\n            svg(file,width=width,height=height)\n            #pdf(file,paper=\"letter\")\n            fun()\n            dev.off()\n        }\n        \n    }   \n\n  \n    \n    cath=function(string=\"\",size=3){\n         cat(paste(\"<h\",size,\">\",string,\"</h\",size,\">\",sep=\"\"))\n    }\n    \n  sectionReport2=function(reportname){\n        downloadHandler(\n            filename = function() {\n                paste(reportname, sep = '.', switch(\n                    input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'\n                ))\n            },\n            \n            content = function(file) {\n                #if(input$format==\"PDF\") tempname=paste(reportname,'1.Rmd',sep=\"\")\n                #else \n                tempname=paste(reportname,'.Rmd',sep=\"\")\n                src <- normalizePath(tempname)\n                \n                # temporarily switch to the temp dir, in case you do not have write\n                # permission to the current working directory\n                owd <- setwd(tempdir())\n                on.exit(setwd(owd))\n                file.copy(src, tempname)\n                \n                out <- render(tempname, switch(\n                    input$format,\n                    PDF = pdf_document(), HTML = html_document(), Word = word_document()\n                ))\n                file.rename(out, file)\n            }\n        )\n    }\n    \n   output$semReport=sectionReport2(\"semReport\")\n   \n\n   putmsg=function(msg=\"test message\"){\n       session$sendCustomMessage(type = 'testmessage',message = list( msg)) \n   }\n   \n  values=reactiveValues()\n  current<-\"\"\n  currentdir=getwd()\n  tempdir=tempdir()\n  owd <- setwd(tempdir)\n  on.exit(setwd(owd)) \n  setwd(currentdir)\n  setHot=function(x) values[[\"Hot\"]]=x\n  \n   origin=reactive({\n       \n       if(input$Example==\"uploaded_file\") {\n           if(is.null(input$file)) {\n               if(input$language==\"en\") putmsg(\"Please upload file first !\")\n               else putmsg(\"먼저 file을 업로드하세요 !\")   \n               \n               df<-ADHD\n               updateRadioButtons(session,\"Example\",\n                                 selected=\"HolzingerSwineford1939\")\n           }            \n           else df<-my_readfile(input$file) \n       }           \n       else {\n         is.csv=grep(\".csv\",input$Example)\n         if(length(is.csv)==0) df=eval(parse(text=input$Example))\n         else df<-read.csv(paste(\"data/\",input$Example,sep=\"\"),stringsAsFactors = FALSE)\n       \n       }   \n       values$choice=input$Example\n       values$new<-TRUE\n\n       df\n   })\n   \n   data=reactive({\n       temp<-input$Example\n       if(is.null(input$hot)) DF=origin()\n       else {\n           if((current==\"\")|(current==input$Example)){\n              current<<-temp\n              DF=hot_to_r(input$hot)\n         \n           } else {\n               DF=origin()\n               current<<-temp\n           }       \n           \n       }       \n       values[[\"DF\"]]=DF\n       DF\n   })\n   \n   \n   output$hot<-renderRHandsontable({\n      DF=data() \n      \n      hot=rhandsontable(DF) %>%\n          hot_context_menu(\n              customOpts = list(\n                  csv = list(name = \"Remove all rows except 1\",\n                             callback = htmlwidgets::JS(\n                                 \"function (key, options) {\n                                 this.alter('remove_row',1,this.countRows()-1);\n   }\"))))\n      \n      hot\n   })\n   \n   output$table1<-renderTable({\n       values$DF\n      \n   })\n   \n  df=reactive({\n      values$DF\n      \n  })\n  \n  observe({\n    \n    df=df()\n    \n    vars=c(\"Select...\"=\"\",colnames(df))\n    \n    \n    updateSelectInput(session,\"leftvar\",choices=c(vars,\"indirect effect\",\"total effect\"))\n    updateSelectInput(session,\"rightvar\",choices=c(vars,\"1\"))\n    updateSelectInput(session,\"indepvar\",choices=vars)\n    updateSelectInput(session,\"resvar\",choices=vars)\n    updateSelectInput(session,\"mediator\",choices=vars)\n    updateSelectInput(session,\"group\",choices=vars,selected=input$group)\n  \n    if(input$language==\"kor\") {\n      shinyjs::html(\"Title1\",\"<h1>웹에서 하는 R 구조 방정식 모형</h1>\")\n      shinyjs::html(\"editOrder\",\"<strong>분석 명령어 편집</strong>\")\n      shinyjs::html(\"summaryOptions\",\"<strong>요약 옵션 선택</strong>\")\n      shinyjs::html(\"otherOptions\",\"<strong>기타 옵션 선택</strong>\")\n      shinyjs::html(\"order1\",\"<strong>R 분석명령어 편집</strong>\")\n      shinyjs::html(\"order2\",\"<strong>R 분석명령어 편집-두번째 모형</strong>\")\n      shinyjs::html(\"doSEM\",\" 분 석 하 기 \")\n      shinyjs::html(\"ResetEx\",\"예제초기화\")\n      shinyjs::html(\"showHelpData\",\"데이타 도움말 보기\")\n      shinyjs::html(\"exportCSV\",\"데이터 CSV로 저장\")\n      shinyjs::html(\"add\",\"구조방정식에 추가\")\n      shinyjs::html(\"reset\",\"구조방정식 초기화\")\n      shinyjs::html(\"semReport\",\"보고서 다운로드\")\n      shinyjs::html(\"downloadPlot\",\"플롯 다운로드\")\n      shinyjs::html(\"downloadPPT\",\"파워포인트로 다운로드\")\n      shinyjs::html(\"helpOp\",\"? 연산자\")\n      shinyjs::html(\"toggleFinalPlot\",\"<h4>플롯 옵션 보기/가리기</h4>\")\n      shinyjs::html(\"toggleHelpOp\",\"연산자 도움말\" )  \n      shinyjs::html(\"toggleHelpData\",\"데이터 도움말 보기/가리기\") \n      shinyjs::html(\"introduction\",md2html(\n\"이 앱을 사용하여 `구조방정식 모형`을 이용한 분석을 할 수 있습니다. `확인요인분석`,`구조방정식 모형`,\n`교차타당성분석`,`매개효과분석`,`잠재성장모형분석`,`부분최소회귀모형(PLS)`를 사용한 분석 등을 시행할 수 있습니다.\n분석과 함께 멋진 plot을 얻을 수 있으며 plot 을 고해상도 이미지(png)로 저장하거나 벡터그래픽(svg) 또는 pdf 형식으로\n다운로드 할 수 있으며 `파워포인트` 파일로도 다운로드 받을 수 있습니다. 자료가 준비된 경우 자료의 분석과 파워포인트 파일\n다운로드까지 일분이면 충분합니다.\"))\n      updateSelectInput(session, \"SelectEx\",label=\"예제 선택\",\n                        choices=c(\"선택안함\"=0,\"확인요인분석\"=1,\n                                     \"구조방정식모형\"=2,\"교차타당성분석\"=3,\n                                     \"매개효과분석\"=4,\n                                     \"잠재성장모형\"=5,\n                                     \"ADHD 데이타\"=6),selected=input$SelectEx)\n      updateRadioButtons(session, \"method\",label = \"분석 옵션 선택\",\n                         choices=c(\"구조방정식모형 사용\"=\"sem\",\n                                      \"확인분석모형 사용\"=\"cfa\",\n                                      \"성장곡선모형 사용\"=\"growth\",\n                                      \"부분최소회귀(PLS)모형 사용\"=\"matrixpls\"))\n      updateRadioButtons(session, inputId = \"Example\", label = \"데이타 선택\",\n                         choices = c(\"HolzingerSwineford1939\",\n                                     \"PoliticalDemocracy\",\n                                     \"example1\",\n                                     \"example2\",\n                                     \"Demo.growth\",\n                                     \"ADHD\",\n                                        \"업로드한 파일\"=\"uploaded_file\"),selected=input$Example)\n    }    \n    else {\n      shinyjs::html(\"Title1\",\"<h1>Structural Equation Modeling with R</h1>\")\n      shinyjs::html(\"editOrder\",\"<strong>Edit Anlysis Order</strong>\")\n      shinyjs::html(\"summaryOptions\",\"<strong>Summary Options</strong>\")\n      shinyjs::html(\"otherOptions\",\"<strong>Other Options</strong>\")\n      shinyjs::html(\"order1\",\"<strong>Edit the Analysis Order</strong>\")\n      shinyjs::html(\"order2\",\"<strong>Edit the Analysis Order - The 2nd Equation</strong>\")\n      shinyjs::html(\"doSEM\",\"do Anlaysis\")\n      shinyjs::html(\"ResetEx\",\"Reset Example\")\n      shinyjs::html(\"showHelpData\",\"show help Data\")\n      shinyjs::html(\"exportCSV\",\"Export to CSV\")\n      shinyjs::html(\"add\",\"add to equation\")\n      shinyjs::html(\"reset\",\"reset the equation\")\n      shinyjs::html(\"semReport\",\"download Report\")\n      shinyjs::html(\"downloadPlot\",\"download Plot(s)\")\n      shinyjs::html(\"downloadPPT\",\"download pptx\")\n      shinyjs::html(\"helpOp\",\"? operator\")\n      shinyjs::html(\"toggleFinalPlot\",\"<h4>Plot Options show/hide</h4>\")\n      shinyjs::html(\"toggleHelpOp\",\"?Operator\" )  \n      shinyjs::html(\"toggleHelpData\",\"Help for Data show/hide\") \n      shinyjs::html(\"introduction\",md2html(\n\"With this app, you can perform `structural equation modeling` with `just one-click`. \nYou can perform the `confirmatory factor analysis`, fit a `structural equation model`, \nfit a `growth curve model`, and fit a `partial least square(PLS) model`. \nAdditionally, you can obtain beautiful plots in png, svg or pdf format. \nYou can download the results with html or PDF format. \nYou can also download the powerpoint file with `just one click`.\"))\n      updateSelectInput(session,inputId = \"SelectEx\",label=\"Select Example\",\n                        choices=c(\"None\"=0,\"Confirmatory Factor Analysis\"=1,\n                                     \"Structural Equation Model\"=2,\n                                      \"Cross-Validation Analysis\"=3,\n                                     \"Mediation Effect Analysis\"=4,\n                                     \"Latent Growth Modeling\"=5,\n                                     \"ADHD data\"=6),selected=input$SelectEx)\n      updateRadioButtons(session,\"method\",label=\"Analysis options\",\n                         choices=c(\"fit a Structural Equation Model\"=\"sem\",\n                                      \"fit a Confirmatory Factor Analysis Models\"=\"cfa\",\n                                      \"fit a Growth Curve Model\"=\"growth\",\n                                      \"fit a Partial Least Squares Model\"=\"matrixpls\"))\n      updateRadioButtons(session,inputId = \"Example\", label = \"Select Data\",\n                         choices = c( \"HolzingerSwineford1939\",\n                                      \"PoliticalDemocracy\",\n                                     \"example1\",\n                                     \"example2\",\n                                     \"Demo.growth\",\n                                     \"ADHD\",\n                                        \"uploaded_file\"),selected=input$Example)\n     \n    }    \n    \n    headings=dic$key[dic$class==\"output\"]\n    for(i in 2:length(headings)) tr2out(headings[i])\n    \n    checks=dic$key[dic$class==\"Checkbox\"]\n    for(i in 1:length(checks)) updateCheckboxInput(session,checks[i],label=tr(checks[i]))\n    \n    selects=dic$key[dic$class==\"Select\"]\n    for(i in 1:length(selects)) updateSelectInput(session,selects[i],label=tr(selects[i]))\n    \n    texts=dic$key[dic$class==\"Text\"]\n    for(i in 1:length(texts)) updateTextInput(session,texts[i],label=tr(texts[i]))\n    \n    radios=dic$key[dic$class==\"Radio\"]\n    for(i in 1:length(radios)) updateRadioButtons(session,radios[i],label=tr(radios[i]))\n    \n    numerics=dic$key[dic$class==\"Numeric\"]\n    for(i in 1:length(numerics)) updateNumericInput(session,numerics[i],label=tr(numerics[i]))\n    \n    \n   updateRadioButtons(session,'language',label=tr('language'))\n   \n})\n  \n  observe({\n    if(input$editAnalysis) updateTextInput(session,\"AnalysisOrder\",value=myfittext())\n    #shinyjs::toggleState(id='semReport',condition=TRUE==FALSE)\n    #shinyjs::toggleState(id='downloadPlot',condition=TRUE==FALSE)\n    #shinyjs::toggleState(id='downloadPPT',condition=TRUE==FALSE)\n  })                \n  \n  observe({  \n    \n    if(input$SelectEx!=0){\n      \n      vars=colnames(df())\n      choice=as.integer(input$SelectEx)\n      updateRadioButtons(session,\"Example\",\n                         selected=myfile[choice])\n      updateTextInput(session,\"equation\",value=myequation[choice])\n      updateRadioButtons(session,\"method\",selected=mymethod[choice])\n      \n      if(input$SelectEx==3) updateSelectInput(session,\"group\",selected=\"school\")\n      else updateSelectInput(session,\"group\",selected=\"\")\n      \n      \n    }\n    \n  })\n  \n  \n# observe({\n#   \n#   \n#       \n#       if(input$SelectEx !=\"0\"){\n#         \n#         choice=as.numeric(input$SelectEx)\n#         updateRadioButtons(session,\"Example\",choices = c(\"HolzingerSwineford1939\",\n#                                                          \"PoliticalDemocracy\",\n#                                                          \"example1\",\n#                                                          \"example2\",\n#                                                          \"Demo.growth\",\n#                                                          \"ADHD\",\n#                                                          \"uploaded_file\"),\n#                            selected=myfile[choice])\n#         data()\n#         vars=c(\"Select...\"=\"\",colnames(df()))\n#         updateTextInput(session,\"equation\",value=myequation[choice])\n#         updateRadioButtons(session,\"method\",selected=mymethod[choice])\n#         \n#         if(choice==3) {\n#           updateSelectInput(session,\"group\",choices=vars,selected=\"school\")\n#         }  else  updateSelectInput(session,\"group\",choices=vars,selected=\"\")    \n#       }\n#     \n# \n# })\n\n\noutput$temp=renderPrint({\n   \n   choice=as.numeric(input$SelectEx)\n  #str(myexample)\n   cat(\"\\nchoice=\",choice,\"\\n\")\n   cat(\"\\nmyfile=\",myfile[choice],\"\\n\")\n   cat(\"\\nmyequation=\",myequation[choice],\"\\n\")\n   cat(\"\\nmymethod=\",mymethod[choice],\"\\n\")\n   cat(\"\\nstr(input$SelectEx)=\",str(input$SelectEx),\"\\n\")\n   # \n   cat(\"\\nas.numeric(input$SelectEx)==3\",as.numeric(input$SelectEx)==3,\"\\n\")\n})\n\n  plustext=function(x){\n      if(is.null(x)) result=\"\"\n      if(length(x)>0) result=x[1]\n      if(length(x)>1) for(i in 2:length(x)) result=paste(result,x[i],sep=\"+\")\n      result\n  }\n  \n  annotatetext=function(x){\n    if(is.null(x)) result=\"\"\n    else{\n    if(length(x)>0) result=paste0(\"c('\",x[1],\"'\")\n    if(length(x)>1) {\n      for(i in 2:length(x)) result=paste0(result,\",'\",x[i],\"'\")\n    }  \n    result=paste0(result,\")\")\n    }\n    result\n  }\n  \n  EqText=reactive({\n      temp=\"\"\n      if(input$lefttext!=\"\") temp=input$lefttext\n      else temp=plustext(input$leftvar)\n      if((temp==\"\") & (length(input$rightvar)==0)) result<-\"\"\n      else{\n          result=paste(temp,input$operator, plustext(input$rightvar))  \n      }\n      result\n  })\n  \n  newvar=c()\n  \n  observeEvent(input$add, {\n    \n      if(input$equation==\"\") updateTextInput(session,\"equation\",value=EqText()) \n      else updateTextInput(session,\"equation\",value=paste(input$equation,EqText(),sep=\"\\n\"))\n      if(input$lefttext!=\"\") {\n         newvar<<-c(newvar,input$lefttext)\n      }\n      newchoices=c(\"Select...\"=\"\",colnames(df()),newvar)\n      updateSelectInput(session,\"leftvar\",choices=newchoices,selected=\"\")\n      updateSelectInput(session,\"rightvar\",choices=newchoices,selected=\"\")\n      updateSelectInput(session,\"indepvar\",choices=newchoices)\n      updateSelectInput(session,\"resvar\",choices=newchoices)\n      updateSelectInput(session,\"mediator\",choices=newchoices)\n      updateSelectInput(session,\"group\",choices=newchoices)\n      updateTextInput(session,\"lefttext\",value=\"\")\n  })\n  \n  \n  makeMediatorEq=function(){\n     temp=\"\"\n     if((input$indepvar==\"\")|(input$resvar==\"\")|(input$mediator==\"\")) temp=\"\"\n     else {\n         temp=paste0(input$resvar,\" ~ b*\",input$mediator,\" + c*\",input$indepvar,\"\\n\")\n         temp=paste0(temp,input$mediator,\" ~ a*\",input$indepvar,\"\\n\")\n         temp=paste0(temp,\"indirect effect:=a*b\\n\")\n         temp=paste0(temp,\"total effect:=c+(a*b)\")\n     }     \n     temp\n  }\n  \n  observeEvent(input$MakeEquation, {\n    \n    temp<-makeMediatorEq()\n    if(temp==\"\") putmsg(\"Please Select Variables First\")\n    else {\n      if(input$equation==\"\") updateTextInput(session,\"equation\",value=temp) \n      else updateTextInput(session,\"equation\",value=paste(input$equation,temp,sep=\"\\n\"))\n      \n    }  \n    \n  })\n  \n  observeEvent(input$reset, {\n    updateTextInput(session,\"equation\",value=\"\")\n    updateSelectInput(session,\"leftvar\",selected=\"\")\n    updateSelectInput(session,\"rightvar\",selected=\"\")\n  })\n  \n  resetEx=function(){\n    updateTextInput(session,\"equation\",value=\"\")\n    updateSelectInput(session,\"SelectEx\",selected=\"0\")\n    updateSelectInput(session,\"group\",selected=\"\")\n    updateRadioButtons(session,\"method\",selected=\"sem\")\n    updateCheckboxInput(session,\"fit.measures\",value=FALSE)\n    \n  }\n  \n  observeEvent(input$ResetEx, {\n     resetEx()\n  })\n  \n  \n  \n  output$EquationText=renderPrint({\n      if(EqText()==\"\") {\n        if(input$language==\"en\") cat(\"Select variables and operators to make a equation !\")\n        else cat(\"변수와 연산자를 선택하여 구조방정식을 만드세요!\")\n      }  \n      else cat(EqText())\n  })\n  \n  output$exportCSV = downloadHandler(\n      filename=\"Mydata.csv\",\n      content=function(file){\n          \n          # temporarily switch to the temp dir, in case you do not have write\n          # permission to the current working directory\n          owd <- setwd(tempdir())\n          on.exit(setwd(owd))\n          \n          write.csv(df(),file=file,row.names=FALSE)\n      },\n      contentType=\"text/csv\"\n  )\n\n   output$downloadReport <- downloadHandler(\n       filename = function() {\n           paste('my-report', sep = '.', switch(\n               input$format, PDF = 'pdf', HTML = 'html', Word = 'docx'\n           ))\n       },\n       \n       content = function(file) {\n           src <- normalizePath('report.Rmd')\n           \n           # temporarily switch to the temp dir, in case you do not have write\n           # permission to the current working directory\n           owd <- setwd(tempdir())\n           on.exit(setwd(owd))\n           file.copy(src, 'report.Rmd')\n           \n           out <- render('report.Rmd', switch(\n               input$format,\n               PDF = pdf_document(), HTML = html_document(), Word = word_document()\n           ))\n           file.rename(out, file)\n       }\n   )\n   \n #  }) \n   \n  \n   \n   \n   # change character variables to factor variables\n   df1=reactive({\n       df1=df()\n       select=sapply(df1,function(x) length(unique(x))<=4)\n       count=length(which(select==TRUE))\n       if(count>1) df1[,select]=lapply(df1[,select],factor)\n       else if(count==1) df1[select]=lapply(df1[select],factor)\n       df1\n   })\n  \noutput$dataHelp<-renderUI({\n\n       if(input$Example==\"ADHD\"){\n#          cath(\"Data Set fo Teacher's Intervention fo ADHD\")\n#          cath(\"id: study identification number\",5)\n#          cath(\"gender: male=1, female=2\",5)\n#          cath(\"age: age groups 1-4\",5)\n\n         includeMarkdown(\"ADHD.md\")\n         \n       } else htmlOutput(\"dataHelpHTML\")\n   \n    \n})   \n\noutput$operatorHelp<-renderUI({\n  \n    column(6,wellPanel(\n       if(input$language==\"kor\") includeMarkdown(\"operatork.md\")\n       else includeMarkdown(\"operator.md\")\n    ))\n\n  \n  \n})   \n\noutput$dataHelpHTML=renderPrint({\n  if(input$Example==\"example1\") {\n    cath(\"Sample Data Made By the Following Code\")\n    cath(\"set.seed(1234)\",5)\n    cath(\"y=rnorm(100)\",5)\n    cath(\"x1=rnrom(100)\",5)\n    cath(\"x2=rnrom(100)\",5)\n    cath(\"x3=rnrom(100)\",5)\n    cath(\"example1=data.frame(y,x1,x2,x3)\",5)\n    \n  } else if(input$Example==\"example2\"){\n    cath(\"Sample Data Made By the Following Code\")\n    cath(\"set.seed(1234)\",5)\n    cath(\"X <- rnorm(100)\",5)\n    cath(\"M <- 0.5*X + rnorm(100)\",5)\n    cath(\"Y <- 0.7*M + rnorm(100)\",5)\n    cath(\"example2 <- data.frame(X , Y , M )\",5)\n  } else help_console(input$Example,\"html\")\n})\n\noutput$Howto1=renderUI({\n  includeMarkdown(\"Howto1.md\")\n#   if(input$language==\"en\") includeMarkdown(\"Howto1.md\")\n#   else includeMarkdown(\"Howto1k.md\")\n  \n})\n\noutput$Howto2=renderUI({\n  includeMarkdown(\"Howto2.md\")\n#   if(input$language==\"en\") includeMarkdown(\"Howto2.md\")\n#   else includeMarkdown(\"Howto2k.md\")\n})\noutput$Howto3=renderUI({\n  includeMarkdown(\"Howto3.md\")\n#   if(input$language==\"en\") includeMarkdown(\"Howto3.md\")\n#   else includeMarkdown(\"Howto3k.md\")\n})\noutput$Howto4=renderUI({\n  includeMarkdown(\"Howto4.md\")\n#   if(input$language==\"en\") includeMarkdown(\"Howto4.md\")\n#   else includeMarkdown(\"Howto4k.md\")\n})\n\noutput$Howto5=renderUI({\n  includeMarkdown(\"Howto5.md\")\n#   if(input$language==\"en\") includeMarkdown(\"Howto5.md\")\n#   else includeMarkdown(\"Howto5k.md\")\n})\noutput$Howto6=renderUI({\n  includeMarkdown(\"Howto6.md\")\n#   if(input$language==\"en\") includeMarkdown(\"Howto6.md\")\n#   else includeMarkdown(\"Howto6k.md\")\n\n})\n\noutput$Howto7=renderUI({\n  includeMarkdown(\"Howto7.md\")\n})\n\noutput$Howto8=renderUI({\n  includeMarkdown(\"Howto8.md\")\n})\n\n\noutput$about=renderUI({\n  \n  if(input$language==\"en\") includeMarkdown(\"aboute.md\")\n  else includeMarkdown(\"about.md\")\n})\n  \noutput$citation1=renderPrint({\n    if(input$language==\"kor\"){\n    cat(paste(\"먼저 방법에서 \",version$version.string,\"을 사용하여 통계처리를 하였다.`라고 기술해야 한다. 패키지를 사용하는 경우 패키지를 인용해야 하는데 대부분의 경우 통계분석을 하는데 사용한 모든 R패키지를 다 인용하지는 않는다. 일반적으로 사용되는 통계방법이 아닌 새로운 통계방법이나 통계방법을 특별히 언급해야 할 필요가 있는 경우에만 인용하는 것이 일반적이다. R version 은 달라질 수 있다. R version 및 사용한  패키지 정보는 다음 version() 및 sessionInfo()에서 확인할 수 있다.\\n\",sep=\"\"))\n    cat(\"\\n\\nR의 version\\n\\n\")\n    print(version)\n    cat(\"\\n\\n웹 R의 sessionInfo()\\n\\n\")\n    print(sessionInfo())\n    cat(\"\\nReferences\\n\\n\")\n    cat(\"1. R을 인용할 때:\\n\")\n    print(citation())\n    cat(\"2. lavaan 패키지의 인용정보\\n\")\n    print(citation(\"lavaan\"))\n    cat(\"3. semPlot 패키지의 인용정보\\n\")\n    print(citation(\"semPlot\"))\n    } else{\n        cat(paste(\"In your 'Method' section, please citate R as 'Analyses were performed using \",version$version.string,\" statistical software.' You can find informations about R version and sessionInfo as followings.\\n\",sep=\"\"))\n        cat(\"\\n\\nR version\\n\\n\")\n        print(version)\n        cat(\"\\n\\nsessionInfo() of r-meta.com\\n\\n\")\n        print(sessionInfo())\n        cat(\"\\nReferences\\n\\n\")\n        cat(\"1. To citate R:\\n\")\n        print(citation())\n        cat(\"2. To citate package 'lavaan'\\n\")\n        print(citation(\"lavaan\"))\n        cat(\"3. To citate package 'semPlot'\\n\")\n        print(citation(\"semPlot\"))\n    }\n    \n    \n})\n\n\noutput$sem.ui1=renderUI({\n  \n  \n  input$doSEM\n  \n  isolate({\n    if(input$equation!=\"\"){    \n      #fit<-myfit()\n      tagList(\n#         htmlOutput('result0'),\n#         verbatimTextOutput('semPlotText0'),\n#         plotOutput('SEMPlot0',height=700),\n#         \n#         if(input$equation2!=\"\") verbatimTextOutput('semPlotText02'),\n#         if(input$equation2!=\"\") plotOutput('SEMPlot02',height=700),\n        htmlOutput('result2'),\n        verbatimTextOutput('semText'),\n        htmlOutput('result1'),\n        verbatimTextOutput('semPlotText'),\n        uiOutput('semplot.ui'),\n        #plotOutput('SEMPlot',height=700),\n        if(input$equation2!=\"\") verbatimTextOutput('semPlotText2'),\n        if(input$equation2!=\"\")  uiOutput('semplot2.ui')\n          #plotOutput('SEMPlot2',height=700)\n        \n       \n      )\n    }\n  })\n  \n})\n\n\noutput$semplot.ui=renderUI({\n  input$doSEM\n  \n  isolate({\n    if(input$equation!=\"\"){    \n      \n      if(input$group==\"\") plotOutput('SEMPlot',height=700)\n      else {\n        count=length(unique(df()[[input$group]]))\n        if(count==1) plotOutput('SEMPlot',height=700)\n        else {\n            fit<-myfit()    \n            diagram<-mysemPlot(DoNotPlot=TRUE)\n            \n            semplot_output_list<-lapply(1:count,function(i) {\n        \n             semplotname<-paste0(\"semplot\",i)\n\n             diagram[[i]]$Arguments$DoNotPlot=FALSE\n             output[[semplotname]] <- renderPlot({\n               \n               qgraph::qgraph(diagram[[i]])\n               title(paste0(input$group,\"=\",i))\n               })\n              \n                plotOutput(semplotname,height=700)\n              }) \n           \n            do.call(tagList,semplot_output_list)\n           \n        }\n      }\n    }\n  })\n})\n\noutput$semplot2.ui=renderUI({\n  input$doSEM\n  \n  isolate({\n    if(input$equation2!=\"\"){    \n      \n      if(input$group==\"\") plotOutput('SEMPlot2',height=700)\n      else {\n        count2=length(unique(df()[[input$group]]))\n        if(count2==1) plotOutput('SEMPlot2',height=700)\n        else {\n          fit<-myfit2()\n          diagram2<-mysemPlot2(DoNotPlot=TRUE)\n          \n          sem2plot_output_list<-lapply(1:count2,function(k) {\n            sem2plotname<-paste0(\"sem2plot\",k)\n            diagram2[[k]]$Arguments$DoNotPlot=FALSE\n            output[[sem2plotname]] <- renderPlot({\n              \n              qgraph::qgraph(diagram2[[k]])\n              title(paste0(input$group,\"=\",k))\n            })\n            plotOutput(sem2plotname,height=700)\n            \n          })\n          do.call(tagList,sem2plot_output_list)\n          \n        }\n      }\n    }\n  })\n})\n\nmyfittext=function(group.equal=1){\n  if(input$Example==\"uploaded_file\") mydata=\"df()\"\n  else mydata=input$Example\n  if(input$method!=\"matrixpls\") temp=paste0(input$method,\"(input$equation,data=\",mydata)\n  else temp <-paste0(\"matrixpls::matrixpls(cov(\",mydata,\"),input$equation\")\n  if(input$group!=\"\") temp=paste0(temp,\",group='\",input$group,\"'\")\n  if(group.equal & !is.null(input$group.equal)) temp=paste0(temp,\",group.equal=\",annotatetext(input$group.equal))\n  if(input$se!=\"default\") temp=paste0(temp,\",se='\",input$se,\"'\")\n  if(input$missing!=\"default\") temp=paste0(temp,\",missing='\",input$missing,\"'\")\n  if(input$estimator!=\"default\") temp=paste0(temp,\",estimator='\",input$estimator,\"'\")\n  temp=paste0(temp,\")\")\n  temp\n}\n\nmyfit=function(group.equal=1){\n  temp=myfittext(group.equal=group.equal)\n  if(input$editAnalysis) fit=eval(parse(text=input$AnalysisOrder))   \n  else fit=eval(parse(text=temp))   \n  fit\n}\n\nmyfittext2=function(group.equal=1){\n  if(input$Example==\"uploaded_file\") mydata=\"df()\"\n  else mydata=input$Example\n  if(input$method!=\"matrixpls\") temp=paste0(input$method,\"(input$equation2,data=\",mydata)\n  else temp <-paste0(\"matrixpls::matrixpls(cov(\",mydata,\"),input$equation2\")\n  if(input$group!=\"\") temp=paste0(temp,\",group='\",input$group,\"'\")\n  if(group.equal & !is.null(input$group.equal)) temp=paste0(temp,\",group.equal=\",annotatetext(input$group.equal))\n  if(input$se!=\"default\") temp=paste0(temp,\",se='\",input$se,\"'\")\n  if(input$missing!=\"default\") temp=paste0(temp,\",missing='\",input$missing,\"'\")\n  if(input$estimator!=\"default\") temp=paste0(temp,\",estimator='\",input$estimator,\"'\")\n  temp=paste0(temp,\")\")\n  temp\n}\n\nmyfit2=function(group.equal=1){\n  temp=myfittext2(group.equal=group.equal)\n  if(input$editAnalysis) fit=eval(parse(text=input$AnalysisOrder2))   \n  else fit=eval(parse(text=temp))   \n  fit\n}\n\noutput$semPlotText=renderPrint({\n  input$doSEM\n  \n  isolate({\n    if(input$equation!=\"\"){ \n      if(input$editAnalysis) cat(\"fit=\",input$AnalysisOrder,\"\\n\")   \n      else cat(\"fit=\",myfittext(),\"\\n\")\n      cat(diagramTemp())\n    }\n  })\n})\n\noutput$semPlotText2=renderPrint({\n  input$doSEM\n  \n  isolate({\n    if(input$equation!=\"\"){   \n      if(input$editAnalysis) cat(\"fit=\",input$AnalysisOrder2,\"\\n\")   \n      else cat(\"fit=\",myfittext2(),\"\\n\")\n      cat(diagramTemp())\n    }\n  })\n})\n\noutput$semPlotText0=renderPrint({\n  input$doSEM\n  \n  isolate({\n    if(input$equation!=\"\"){   \n      cat(\"fit=\",myfittext(),\"\\n\")\n      cat(diagramTemp0())\n    }\n  })\n})\n\noutput$semPlotText02=renderPrint({\n  input$doSEM\n  \n  isolate({\n    if(input$equation!=\"\"){   \n      cat(\"fit=\",myfittext2(),\"\\n\")\n      cat(diagramTemp0())\n    }\n  })\n})\n \noutput$semText=renderPrint({\n  input$doSEM\n  \n  isolate({\n      if(input$equation!=\"\"){    \n        \n         \n        #print(str(fit))\n\n        if((input$moderating)&(input$showcor)){\n#           cat(\"## Correlation analysis\\n\")\n#           tempdf=df()[,c(input$indepvar,input$mediator,input$resvar)]\n#           print(cor(tempdf))\n#           cat(\"\\n\\n\")\n        }  \n         cat(\"## Results of Analysis\\n\\n\")\n         if(input$editAnalysis) cat(\"fit=\",input$AnalysisOrder,\"\\n\")   \n         else cat(\"fit=\",myfittext(),\"\\n\")\n         if(input$method==\"matrixpls\") {\n           \n           cat(\"summary(fit)\\n\")\n           fit<-matrixpls::matrixpls(cov(df()),input$equation)\n           summary(fit)\n           print(summary(fit))\n           if(input$showcoef) {\n              cat(\"\\ncoef(fit)\\n\")\n              print(coef(fit))\n           }   \n         } else {\n           cat(\"summary(fit,standardized=\",input$standardized,\n               \",fit.measures=\",input$fit.measures,\n               \",rsquare=\",input$rsquare,\",modindices=\",input$modindices,\")\\n\\n\")\n           fit<-myfit()\n           summary(fit,standardized=input$standardized,fit.measures=input$fit.measures,\n                   rsquare=input$rsquare,modindices=input$modindices)\n           if(input$showcoef) {\n             cat(\"\\ncoef(fit)\\n\")\n             print(coef(fit))\n           }\n           if((input$group!=\"\") & input$showMeaInv) {\n             cat(\"\\nmeasurementInvariance(input$equation,data=\",input$Example,\",group='\",input$group,\"')\\n\")\n             print(semTools::measurementInvariance(input$equation,data=df(),group=input$group))\n           }\n         \n         } \n         \n         if((input$moderating)&(input$sobel)){\n             PE<-parameterEstimates(fit)\n             a=PE$est[3]\n             sa=PE$se[3]\n             b=PE$est[1]\n             sb=PE$se[1]\n             \n             result=Sobel(a,b,sa,sb)\n             print(result)\n         }\n         if(input$moderating){\n             cat(\"\\n\\n## ParameterEstimates ##\\n\\n\")\n             print(parameterEstimates(fit, boot.ci.type = \"bca.simple\", standardized = TRUE))\n           \n         }   \n         if(input$method==\"cfa\"){\n             cat(\"\\n\\n## Average Variance Extracted \\n\\n\")\n             loadMatrix <- inspect(fit, \"std\")$lambda\n             loadMatrix[loadMatrix==0] <- NA\n             AVE=apply(loadMatrix^2,2,mean, na.rm = TRUE)\n             result=data.frame(AVE=AVE,SQRTAVE=sqrt(AVE))\n             print(result)\n         }\n      \n      }\n      if(input$equation2!=\"\"){ \n          fit2=myfit2()\n          cat(\"\\n\\n## Results of Analysis using equation2\\n\\n\")\n          if(input$editAnalysis) cat(\"fit2=\",input$AnalysisOrder2,\"\\n\")   \n          else cat(\"fit2=\",myfittext2(),\"\\n\")\n          cat(\"summary(fit2,standardized=\",input$standardized,\n              \",fit.measures=\",input$fit.measures,\n              \",rsquare=\",input$rsquare,\",modindices=\",input$modindices,\")\\n\\n\")\n          summary(fit2,standardized=input$standardized,fit.measures=input$fit.measures,\n                  rsquare=input$rsquare,modindices=input$modindices)\n          \n          if(input$showcoef) {\n            cat(\"\\ncoef(fit2)\\n\")\n            print(coef(fit2))\n          }\n          if(input$compareModels){\n              cat(\"\\n\\n## Compare Models\\n\")\n              cat(\"\\n\\n## call: anova(fit,fit2)\\n\")\n              anova(fit,fit2)\n          }\n          \n      }  \n  })\n})\n\n\ndiagramTemp=function(DoNotPlot=FALSE){\n  \n  temp=\"semPaths(fit\"\n  if(length(input$what)!=0) temp=paste0(temp,\",what='\",plustext(input$what),\"'\")\n  if(length(input$whatLabels)!=0) temp=paste0(temp,\",whatLabels='\",plustext(input$whatLabels),\"'\")\n  if(input$style!=\"ram\") temp=paste0(temp,\",style='\",input$style,\"'\")\n  if(input$layout!=\"tree\") temp=paste0(temp,\",layout='\",input$layout,\"'\")\n  if(input$intercept==FALSE) temp=paste0(temp,\",intercept=FALSE\")\n  if(input$residuals==FALSE) temp=paste0(temp,\",residuals=FALSE\")\n  if(input$thresholds==FALSE) temp=paste0(temp,\",thresholds=FALSE\")\n  if(input$nCharNodes!=3) temp=paste0(temp,\",nCharNodes=\",input$nCharNodes)\n  if(input$nCharEdges!=3) temp=paste0(temp,\",nCharEdges=\",input$nCharEdges)\n  if(input$rotation!=1) temp=paste0(temp,\",rotation=\",input$rotation)\n  if(input$groups!=\"\") temp=paste0(temp,\",groups='\",input$groups,\"'\")\n  if(input$pastel==TRUE) temp=paste0(temp,\",pastel=TRUE\")\n  if(input$curvePivot==TRUE) temp=paste0(temp,\",curvePivot=TRUE\")\n  if(DoNotPlot) temp=paste0(temp,\",DoNotPlot=TRUE,title=FALSE\")\n  else temp=paste0(temp,\",title=TRUE\")\n  if(input$Other!=\"\") temp=paste0(temp,\",\",input$Other)\n  temp=paste0(temp,\",curveAdjacent=TRUE,ask=FALSE)\")\n  temp\n\n}\n\ndiagramTemp0=function(DoNotPlot=FALSE){\n  \n  temp=\"semPaths(fit\"\n  if(input$what0!=\"paths\") temp=paste0(temp,\",what='\",input$what0,\"'\")\n  if(input$whatLabels0!=\"\") temp=paste0(temp,\",whatLabels='\",input$whatLabels0,\"'\")\n  if(input$style0!=\"ram\") temp=paste0(temp,\",style='\",input$style0,\"'\")\n  if(input$layout0!=\"tree\") temp=paste0(temp,\",layout='\",input$layout0,\"'\")\n  if(input$intercept0==FALSE) temp=paste0(temp,\",intercept=FALSE\")\n  if(input$residuals0==FALSE) temp=paste0(temp,\",residuals=FALSE\")\n  if(input$thresholds0==FALSE) temp=paste0(temp,\",thresholds=FALSE\")\n  if(input$nCharNodes0!=3) temp=paste0(temp,\",nCharNodes=\",input$nCharNodes0)\n  if(input$nCharEdges0!=3) temp=paste0(temp,\",nCharEdges=\",input$nCharEdges0)\n  if(input$rotation0!=1) temp=paste0(temp,\",rotation=\",input$rotation0)\n  if(input$groups0!=\"\") temp=paste0(temp,\",groups='\",input$groups0,\"'\")\n  if(input$pastel0==TRUE) temp=paste0(temp,\",pastel=TRUE\")\n  if(input$curvePivot0==TRUE) temp=paste0(temp,\",curvePivot=TRUE\")\n  if(DoNotPlot) temp=paste0(temp,\",DoNotPlot=TRUE,title=FALSE\")\n  else temp=paste0(temp,\",title=TRUE\")\n  if(input$Other0!=\"\") temp=paste0(temp,\",\",input$Other0)\n  temp=paste0(temp,\",curveAdjacent=TRUE,ask=FALSE)\")\n  temp\n  \n}\n\nmysemPlot=function(DoNotPlot=FALSE,which=0){\n  \n  if(input$equation!=\"\"){    \n    #fit<-myfit(group.equal=0)\n    fit<-myfit()\n    if(input$method==\"matrixpls\") fit=sem(data=df(),input$equation)\n    else fit=fit\n    diagram<-eval(parse(text=diagramTemp(DoNotPlot)))\n#     if(which==0) {\n#       diagram$Arguments$DoNotPlot=TRUE\n#       diagram\n#     } else {\n#       diagram[[which]]$Arguments$DoNotPlot=FALSE\n#       qgraph::qgraph(diagram[[which]])\n#       \n#     } \n    \n  }\n}\n\nmysemPlot2=function(DoNotPlot=FALSE){\n  if(input$equation2!=\"\"){    \n    #fit=myfit2(group.equal=0)\n    fit=myfit2()\n    diagram<-eval(parse(text=diagramTemp(DoNotPlot)))\n    diagram\n    \n  }\n}\n\noutput$SEMPlot=renderPlot({\n  input$doSEM\n  \n  isolate({\n    if(input$equation!=\"\"){    \n       mysemPlot()\n    }\n  })\n})\n\noutput$Model.ui=renderUI({\n    if((input$preview) & (input$equation!=\"\"))  plotOutput('ModelPlot',height=700)\n})\n\noutput$ModelPlot=renderPlot({\n  if((input$preview) & (input$equation!=\"\"))  mysemPlot()\n})\n\n\noutput$SEMPlot2=renderPlot({\n  input$doSEM\n  \n  isolate({\n    if(input$equation!=\"\"){    \n      mysemPlot2()\n    }\n  })\n})\n\n# addggplot=function(mydoc,plot,title=\"\"){\n#   mydoc=addSlide(mydoc,\"Title and Content\")\n#   mydoc=addTitle(mydoc,title)\n#   mydoc=addPlot(mydoc,fun=print,x=plot,vector.graphic=TRUE)\n#   mydoc\n# }\n# \n# addplot=function(mydoc,plotfunction,title=\"\"){\n#   mydoc=addSlide(mydoc,\"Title and Content\")\n#   mydoc=addTitle(mydoc,title)\n#   mydoc=addPlot(mydoc,function() {plotfunction},vector.graphic=TRUE)\n#   mydoc\n# }\n\naddplot=function(mydoc,plotfunction,title=\"\",...){\n  mydoc=addSlide(mydoc,\"Title and Content\")\n  mydoc=addTitle(mydoc,title)\n  mydoc=addPlot(mydoc,function() {plotfunction},vector.graphic=TRUE,...)\n  mydoc\n}\n\naddImageSlide=function(mydoc,image){\n  mydoc=addSlide(mydoc,\"Content\")\n  mydoc=addImage(mydoc,image)\n  mydoc\n}\n\n\ngdiagram=c()\n\nmyqgraph=function(){\n  qgraph::qgraph(gdiagram)\n}\n\naddqgraphPlot=function(mydoc,diagram,title=\"\",...){\n  mydoc=addSlide(mydoc,\"Content\")\n # mydoc=addTitle(mydoc,title)\n  gdiagram<<-diagram\n  #if(input$pptfigformat==\"png\") \n    mydoc=addPlot(mydoc,myqgraph,vector.graphic=input$pptvector,...)\n    \n#   else {\n#     devEMF::emf(width=ifelse(input$pptformat==\"normal\",9.17,12.23),height=6.48)\n#     diagram$Arguments$DoNotPlot=FALSE\n#     qgraph::qgraph(diagram)\n#     dev.off()\n#     mydoc=addImage(mydoc,\"Rplot.emf\")\n#     \n#   }\n  if(title!=\"\") mydoc=addFooter(mydoc,title)\n  mydoc\n}\n\nmysemplotlist=function(){\n    \n    fit<-myfit()    \n    diagram<-mysemPlot(DoNotPlot=TRUE)\n    if(input$group==\"\") count=1\n    else count=length(unique(df()[[input$group]]))\n    \n    result=list()\n    if(count==1) {\n       diagram$Arguments$DoNotPlot=FALSE\n       result=list(result,qgraph::qgraph(diagram))\n    }    \n    else for(i in 1:count) {\n      \n      diagram[[i]]$Arguments$DoNotPlot=FALSE\n      temp={\n        qgraph::qgraph(diagram[[i]])\n        title(paste0(input$group,\"=\",i))\n      }\n      result=list(result,temp)\n    } \n   \n    result\n}\n\naddImageSlide=function(mydoc,image){\n  mydoc=addSlide(mydoc,\"Content\")\n  mydoc=addImage(mydoc,image)\n  mydoc\n}\n\noutput$downloadPPT = downloadHandler(\n  filename=\"R-sem.pptx\",\n  content=function(file){\n    \n    # temporarily switch to the temp dir, in case you do not have write\n    # permission to the current working directory\n    \n    if(input$pptformat==\"normal\") mydoc=pptx(template=\"myppt.pptx\")\n    else mydoc=pptx(template=\"mywideppt.pptx\")\n    owd <- setwd(tempdir())\n    on.exit(setwd(owd))\n    \n    mydoc=addSlide(mydoc,\"Title Slide\")\n    mydoc=addTitle(mydoc,\"Results of SEM\")\n    mydoc=addSubtitle(mydoc,\"prepared by r-sem.com\")\n    \n    #fit<-myfit()    \n    diagram<-mysemPlot(DoNotPlot=TRUE)\n    \n    if(input$group==\"\") count=1\n    else count=length(unique(df()[[input$group]]))\n    if(count==1) {\n        diagram$Arguments$DoNotPlot=FALSE\n        mydoc=addqgraphPlot(mydoc,diagram)\n    }  \n    else for(i in 1:count) {\n      diagram[[i]]$Arguments$DoNotPlot=FALSE\n      #qgraph::qgraph(diagram[[i]])\n      title=paste0(input$group,\"=\",i)\n      mydoc=addqgraphPlot(mydoc,diagram[[i]],title=title)\n      mydoc\n    }  \n    if(input$equation2!=\"\"){\n      diagram2<-mysemPlot2(DoNotPlot=TRUE)\n      \n      if(input$group==\"\") count=1\n      else count=length(unique(df()[[input$group]]))\n      if(count==1) {\n        diagram2$Arguments$DoNotPlot=FALSE\n        mydoc=addqgraphPlot(mydoc,diagram2)\n      }  \n      else for(i in 1:count) {\n        diagram2[[i]]$Arguments$DoNotPlot=FALSE\n        #qgraph::qgraph(diagram[[i]])\n        title=paste0(input$group,\"=\",i)\n        mydoc=addqgraphPlot(mydoc,diagram2[[i]],title=title)\n        mydoc\n      }    \n    \n    }\n    writeDoc(mydoc,file=file)\n    #zip(zipfile=file,files=c(\"R-Meta.pptx\"))\n  },\n  contentType=\"application/vnd-ms-powerpoint\"\n)\n\nmyfigure=function(filename){\n    if(input$plotformat==\"png\") png(filename,width=input$plotWidth,height=input$plotHeight)\n    else if(input$plotformat==\"svg\") svg(filename,width=input$plotWidth,height=input$plotHeight)\n    else pdf(filename,width=input$plotWidth,height=input$plotHeight)\n}\n\nmyfigurename=function(i=1){\n   result=paste0(\"plot_\",i,\".\",input$plotformat)\n   result\n}\n\nmyeval=function(temp){\n   eval(parse(text=temp))\n}\n\n\noutput$downloadPlot = downloadHandler(\n  filename=\"R-sem.zip\",\n  content=function(file){\n    \n    # temporarily switch to the temp dir, in case you do not have write\n    # permission to the current working directory\n      owd <- setwd(tempdir())\n      on.exit(setwd(owd))\n      \n    fs=c()\n     \n   fit<-myfit()    \n   diagram<-mysemPlot(TRUE)\n   if(input$group==\"\") count=1\n    else count=length(unique(df()[[input$group]]))\n   \n    plotwidth=ifelse(input$plotformat==\"png\",input$plotWidth*300,input$plotWidth)\n    plotheight=ifelse(input$plotformat==\"png\",input$plotHeight*300,input$plotHeight)\n    \n    if(count==1) {\n       \n       temp=paste0(\"semplot.\",input$plotformat)\n       temporder=paste0(input$plotformat,\"('\",temp,\"',width=\",plotwidth,\n                        \",height=\",plotheight,\")\")\n       eval(parse(text=temporder))\n       diagram$Arguments$DoNotPlot=FALSE\n       qgraph::qgraph(diagram)\n      dev.off()\n      fs=c(fs,temp)\n    }    \n    else lapply(1:count,function(k) {\n        temp=paste0(\"semplot\",k,\".\",input$plotformat)\n       temporder=paste0(input$plotformat,\"('\",temp,\"',width=\",plotwidth,\n                               \",height=\",plotheight,\")\")\n        #putmsg(temporder)\n           eval(parse(text=temporder))\n  \n        diagram[[k]]$Arguments$DoNotPlot=FALSE\n        qgraph::qgraph(diagram[[k]])\n        title(paste0(input$group,\"=\",k))\n        dev.off()\n        fs<<-c(fs,temp)\n    })\n   if(input$equation2!=\"\"){\n     diagram2<-mysemPlot2(DoNotPlot=TRUE)\n     \n     if(input$group==\"\") count=1\n     else count=length(unique(df()[[input$group]]))\n     if(count==1) {\n       temp=paste0(\"semplot2.\",input$plotformat)\n       temporder=paste0(input$plotformat,\"('\",temp,\"',width=\",plotwidth,\n                        \",height=\",plotheight,\")\")\n       eval(parse(text=temporder))\n       diagram2$Arguments$DoNotPlot=FALSE\n       qgraph::qgraph(diagram2)\n       dev.off()\n       fs=c(fs,temp)\n     }  \n     else lapply(1:count,function(k) {\n       temp=paste0(\"semplot\",k+count,\".\",input$plotformat)\n       temporder=paste0(input$plotformat,\"('\",temp,\"',width=\",plotwidth,\n                        \",height=\",plotheight,\")\")\n       #putmsg(temporder)\n       eval(parse(text=temporder))\n       diagram2[[k]]$Arguments$DoNotPlot=FALSE\n       qgraph::qgraph(diagram2[[k]])\n       title(paste0(input$group,\"=\",k))\n       dev.off()\n       fs<<-c(fs,temp)\n     })\n   }\n    zip(zipfile=file, files=fs)\n  },\n  contentType=\"application/zip\"\n)\n\noutput$result0=renderPrint({\n  cath(\"Path Diagram\")\n  \n})\n\nSobel <- function (a, b, sa, sb) {\n  \n  cat(\"\\n## Sobel test for the significance of a mediation effect\\n\\n\")\n  cat(\"\\na=\",a)\n  cat(\"\\nb=\",b)\n  cat(\"\\nsa=\",sa)\n  cat(\"\\nsb=\",sb,\"\\n\\n\")\n  \n  tmp1 = b^2 * sa^2 + a^2 * sb^2\n  tmp2 = sa^2 * sb^2\n  zsob = a * b/sqrt(tmp1)\n  psob = pnorm(-abs(zsob)) * 2\n  zaro = a * b/sqrt(tmp1 + tmp2)\n  paro = pnorm(-abs(zaro)) * 2\n  if (tmp1 > tmp2) {\n    zgm = a * b/sqrt(tmp1 - tmp2)\n    pgm = pnorm(-abs(zgm)) * 2\n  }\n  else {\n    zgm = NA\n    pgm = NA\n  }\n  p.value = c(psob, paro, pgm)\n  z.value = c(zsob, zaro, zgm)\n  out = data.frame(rbind(z.value, p.value))\n  names(out) = c(\"Sobel\", \"Aroian\", \"Goodman\")\n  result=t(out)\n  data.frame(result)\n}\n\n})\n\n\n",
    "created" : 1456809398370.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3991104822",
    "id" : "D1BB465D",
    "lastKnownWriteTime" : 1456808569,
    "last_content_update" : 1456808569,
    "path" : "~/ownCloud/Documents/r-sem/server5.R",
    "project_path" : "server5.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}