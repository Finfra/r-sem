y4 ~~ y8
y6 ~~ y8'
fit <- sem(model, data=PoliticalDemocracy)
summary(fit, standardized=TRUE)
semPaths(model)
H.S.model2='
# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts
x1 ~ 1
x2 ~ 1
x3 ~ 1
x4 ~ 1
x5 ~ 1
x6 ~ 1
x7 ~ 1
x8 ~ 1
x9 ~ 1'
fit=cfa(HS.model2,data=HolzingerSwineford1939)
HS.model2='
# three-factor model
visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9
# intercepts
x1 ~ 1
x2 ~ 1
x3 ~ 1
x4 ~ 1
x5 ~ 1
x6 ~ 1
x7 ~ 1
x8 ~ 1
x9 ~ 1'
fit=cfa(HS.model2,data=HolzingerSwineford1939)
fit2=cfa(HS.model2,data=HolzingerSwineford1939)
semPaths(fit2)
summary(fit2, fit.measures = TRUE)
HS.model <- '  visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model,
data = HolzingerSwineford1939,
group = "school")
summary(fit)
semPaths(fit2,"std","est")
HS.model <- '  visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model,
data = HolzingerSwineford1939,
group = "school")
summary(fit)
semPaths(fit2,"std","est")
semPaths(fit,"std","est")
semPaths(fit,"paths","std")
model <- ' i =~ 1*t1 + 1*t2 + 1*t3 + 1*t4
s =~ 0*t1 + 1*t2 + 2*t3 + 3*t4 '
fit <- growth(model, data=Demo.growth)
summary(fit)
semPaths(fit,"paths","std")
semPaths(fit)
model <- '
# intercept and slope with fixed coefficients
i =~ 1*t1 + 1*t2 + 1*t3 + 1*t4
s =~ 0*t1 + 1*t2 + 2*t3 + 3*t4
# regressions
i ~ x1 + x2
s ~ x1 + x2
# time-varying covariates
t1 ~ c1
t2 ~ c2
t3 ~ c3
t4 ~ c4
'
fit <- growth(model, data = Demo.growth)
summary(fit)
semPaths(fit,"paths","std")
semPaths(fit)
summary(fit,rotation=3)
semPaths(fit,rotation=3)
semPaths(fit,"paths",rotation=3)
semPaths(fit,"paths","hode",rotation=3)
semPaths(fit,"paths","hide",rotation=3)
semPaths(fit,"paths","hide",intercept=FALSE,rotation=3)
semPaths(fit,"paths","hide",intercept=FALSE,residual=FALSE,rotation=3)
lower <- '
11.834
6.947   9.364
6.819   5.091  12.532
4.783   5.028   7.495   9.986
-3.839  -3.889  -3.841  -3.625  9.610
-21.899 -18.831 -21.748 -18.775 35.522 450.288 '
wheaton.cov <-
getCov(lower, names = c("anomia67", "powerless67",
"anomia71", "powerless71",
"education", "sei"))
wheaton.model <- '
# latent variables
ses     =~ education + sei
alien67 =~ anomia67 + powerless67
alien71 =~ anomia71 + powerless71
# regressions
alien71 ~ alien67 + ses
alien67 ~ ses
# correlated residuals
anomia67 ~~ anomia71
powerless67 ~~ powerless71
'
fit <- sem(wheaton.model,
sample.cov = wheaton.cov,
sample.nobs = 932)
summary(fit, standardized = TRUE)
semPaths(fit)
semPaths(fit,"paths","est")
set.seed(1234)
X <- rnorm(100)
M <- 0.5*X + rnorm(100)
Y <- 0.7*M + rnorm(100)
Data <- data.frame(X = X, Y = Y, M = M)
model <- ' # direct effect
Y ~ c*X
# mediator
M ~ a*X
Y ~ b*M
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)
'
fit <- sem(model, data = Data)
summary(fit)
semPaths(fit,"paths","est")
Data
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
)
rm(list = ls())
library(shiny)
library(shinyBS)
shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(numericInput("n", "n", 50),actionButton("go", "Go")),
mainPanel(
bsModal("modalExample", "Your plot", "go", size = "large",plotOutput("plot"),downloadButton('downloadPlot', 'Download'))
)
)
),
server =
function(input, output, session) {
randomVals <- eventReactive(input$go, {
runif(input$n)
})
plotInput <- function(){hist(randomVals())}
output$plot <- renderPlot({
hist(randomVals())
})
output$downloadPlot <- downloadHandler(
filename = "Shinyplot.png",
content = function(file) {
png(file)
plotInput()
dev.off()
})
}
)
install.packages("shinyBS")
rm(list = ls())
library(shiny)
library(shinyBS)
shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(numericInput("n", "n", 50),actionButton("go", "Go")),
mainPanel(
bsModal("modalExample", "Your plot", "go", size = "large",plotOutput("plot"),downloadButton('downloadPlot', 'Download'))
)
)
),
server =
function(input, output, session) {
randomVals <- eventReactive(input$go, {
runif(input$n)
})
plotInput <- function(){hist(randomVals())}
output$plot <- renderPlot({
hist(randomVals())
})
output$downloadPlot <- downloadHandler(
filename = "Shinyplot.png",
content = function(file) {
png(file)
plotInput()
dev.off()
})
}
)
shiny::runApp()
rm(list = ls())
library(shiny)
library(shinyBS)
shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(numericInput("n", "n", 50),actionButton("go", "Go")),
mainPanel(
bsModal("modalExample", "Your plot", "go", size = "large",
plotOutput("plot"),
downloadButton('downloadPlot', 'Download'))
)
)
),
server =
function(input, output, session) {
randomVals <- eventReactive(input$go, {
runif(input$n)
})
#plotInput <- function(){hist(randomVals())}
output$plot <- renderPlot({
hist(randomVals())
})
output$downloadPlot <- downloadHandler(
filename = "Shinyplot.png",
content = function(file) {
png(file)
plotInput()
dev.off()
})
}
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data=read.csv("data/ADHD.csv")
summary(data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
bsExample("Modals")
shinyBS::bsExample("Modals")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dictionary=read.csv("dictionary.csv",fileEncoding="utf-8")
library(plyr)
translationContent <- read.csv("dictionary.csv",fileEncoding="utf-8")
translation <- dlply(translationContent ,.(key), function(s) key = as.list(s))
save(translation, file = "translation.bin")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
---
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(lavaan)
library(semPlot)
shiny::runApp()
library(lavaan)
library(semPlot)
model='# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual correlations
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8'
fit=sem(PoliticalDemocracy,model=model)
semPlot(fit)
semPaths(fit)
semPaths(fit,what="paths")
semPaths(fit,what="pathsest")
semPaths(fit,what="pathsestcol")
semPaths(fit,what="col")
semPaths(fit,what="col")
semPaths(fit,what="col",whatLabels="est")
semPaths(fit,what="col",whatLabels="eststd")
semPaths(fit,what="std",whatLabels="est")
semPaths(fit,what="col",whatLabels="est")
semPaths(fit,what="col",whatLabels="std")
semPaths(fit,what="eq",whatLabels="std")
semPaths(fit,what="col",whatLabels="est")
semPaths(fit,what="col")
semPaths(fit,what="eq",whatLabels = "eq")
str(PoliticalDemocracy)
shiny::runApp()
fit=sem(HolzingerSwineford1939,model=model2,group='school')
model2='visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9'
fit=sem(HolzingerSwineford1939,model=model2,group='school')
semPaths(fit,what="eq",whatLabels = "eq")
semPaths(fit,what="eq",whatLabels = "eq",title=TRUE)
semPaths(fit,what="eq",whatLabels = "eq",title=FALSE)
semPaths(fit,what="eq",whatLabels = "eq",title=TRUE)
semPaths(fit)
fit=sem(HolzingerSwineford1939,model=model2)
semPaths(fit)
semPaths(fit,what="col",whatLabels = "est",title=TRUE)
semPaths(fit,what="col",whatLabels = "est",group="manlat",title=TRUE)
semPaths(fit,what="col",whatLabels = "est",group="manlat",pastel=TRUE,title=TRUE)
semPaths(fit,what="std",whatLabels = "est",group="manlat",pastel=TRUE,title=TRUE)
semPaths(fit,what="stdcol",whatLabels = "est",group="manlat",pastel=TRUE,title=TRUE)
semPaths(fit,what="std+col",whatLabels = "est",group="manlat",pastel=TRUE,title=TRUE)
semPaths(fit,what="std+col+eq",whatLabels = "est",group="manlat",pastel=TRUE,title=TRUE)
semPaths(fit,what="col+eq",whatLabels = "est",group="manlat",pastel=TRUE,title=TRUE)
semPaths(fit,what="col+eq",whatLabels = "est+std",group="manlat",pastel=TRUE,title=TRUE)
semPaths(fit,what="col+eq",whatLabels = "eq",group="manlat",pastel=TRUE,title=TRUE)
semPaths(fit,what="col+eq",whatLabels = "label",group="manlat",pastel=TRUE,title=TRUE)
shiny::runApp()
fit=sem(HolzingerSwineford1939,model=model2)
semPaths(fit)
semPaths(fit,resudual=FALSE)
semPaths(fit,resudual=FALSE,intercept=FALSE)
semPaths(fit,residual=FALSE,intercept=FALSE)
semPaths(fit,residual=FALSE)
semPaths(fit)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
download.file("http://sachaepskamp.com/files/mi1.OUT", modFile <- tempfile(fileext = ".OUT"))
modFile
str(modFile)
layout(t(1:2))
semPaths(modFile, "eq", ask = FALSE, as.expression = "edges", mar = c(3, 1, 5, 1))
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("semTools")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
---
shiny::runApp()
shiny::runApp()
class?lavaan
example1 <- data.frame(y = rnorm(100),
x1 = rnorm(100),
x2 = rnorm(100),
x3 = rnorm(100))
example1 <- data.frame(y = rnorm(100),
x1 = rnorm(100),
x2 = rnorm(100),
x3 = rnorm(100))
lm(y~x1+x2+x3,data=example1)
set.seed(1234)
example1 <- data.frame(y = rnorm(100),
x1 = rnorm(100),
x2 = rnorm(100),
x3 = rnorm(100))
lm(y~x1+x2+x3,data=example1)
shiny::runApp()
shiny::runApp()
a=0.589
b=0.337
sa=0.082
sb=0.448
Sobel <- function (a, b, sa, sb) {
cat("\n## Sobel test for the significance of a mediation effect\n\n")
cat("\na=",a)
cat("\nb=",b)
cat("\nsa=",sa)
cat("\nsb=",sb,"\n\n")
tmp1 = b^2 * sa^2 + a^2 * sb^2
tmp2 = sa^2 * sb^2
zsob = a * b/sqrt(tmp1)
psob = pnorm(-abs(zsob)) * 2
zaro = a * b/sqrt(tmp1 + tmp2)
paro = pnorm(-abs(zaro)) * 2
if (tmp1 > tmp2) {
zgm = a * b/sqrt(tmp1 - tmp2)
pgm = pnorm(-abs(zgm)) * 2
}
else {
zgm = NA
pgm = NA
}
p.value = c(psob, paro, pgm)
z.value = c(zsob, zaro, zgm)
out = data.frame(rbind(z.value, p.value))
names(out) = c("Sobel", "Aroian", "Goodman")
result=t(out)
data.frame(result)
}
Sobel(a, b, sa, sb)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
if((input$moderating)&(input$sobel)){
shiny::runApp()
runApp()
install.packages(c("gridExtra", "gtable", "nlme", "OpenMx", "openssl", "ReporteRs", "rgdal", "rgeos", "RVAideMemoire", "scales", "vegan"))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
dictionary=read.csv("dictionary.csv",fileEncoding="utf-8")
library(plyr)
translationContent <- read.csv("dictionary.csv",fileEncoding="utf-8")
translation <- dlply(translationContent ,.(key), function(s) key = as.list(s))
save(translation, file = "translation.bin")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
myfile
myequation
myequation
mymethod
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
